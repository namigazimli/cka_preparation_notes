apiVersion: v1
kind: Pod                               <<==== This file is defining a pod
metadata:
  name: kcna-pod                        <<==== Pod name
spec:
  volumes:                              <<==== Define a volume both containers can access
  - name: html                          <<==== Give the shared volume a name ("html")
    emptyDir: {}                        <<==== Make it an empty volume
  containers:                           <<==== This block defines two containers
    - name: main-container              <<==== This is the main app container
      image: <app-image>                <<==== Main app container image
      volumeMounts:                     <<==== Mount a volume into main app container
      - name: html                      <<==== Mount the shared “html” volume
        mountPath: /usr/share/nginx/    <<=== Mount it here in the container
    - name: sidecar                     <<==== This is the sidecar container
      image: <sidecar-image>            <<==== Sidecar container image
      volumeMounts:                     <<==== Mount a volume into the sidecar container
      - name: html                      <<==== Mount the same shared “html” volume
        mountPath: /tmp/git             <<==== Mount it here in the sidecar container


Lines 1-9 define the pod, whereas lines 10-20 describe two containers. As with the
previous example, both containers are nested/wrapped within the pod definition. Lines 6-8 
define a new empty volume called “html”. As it’s part of the pod environment it’s accessible 
to both containers. The detail isn’t important, you just need to recognise that the pod is 
bringing features the containers don’t natively have. Lines 11-15 define the main application 
container. It mounts the shared html volume into its local filesystem at /usr/share/nginx.
Lines 16-20 define the sidecar container and mount the same shared html volume at /tmp/git.
To summarise the YAML file, it describes a multi-container pod. The pod includes a runtime 
class reference to help the scheduler and it defines a shared volume. Both containers mount 
the shared volume and can use it to share data.
