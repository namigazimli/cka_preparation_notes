The concept of service accounts is linked to other security related concepts in Kubernetes, such as authentication, authorization, RBACs, etc. 
However, as part of the Kubernetes for CKAD exam curiculum, you only need to know how to work with service accounts. So, there are two types of 
accounts in Kubernetes: user account and service account. The user account is used by humans and service accounts are used by machines. A user 
account could be for an administrator accessing the cluster to perform administrative tasks or a developer accessing the cluster to deploy apps, etc. A service account could be an account used by an application to interact with the Kubernetes cluster. For example, a monitoring application like Prometheus uses a service account to poll the Kubernetes API for performance metrics. An automated build tool like Jenkins user service 
accounts to deploy applications on the Kubernetes cluster. To create a service account run the command "kubectl create serviceaccount". To view  the service accounts, run the "kubectl get serviceaccount" command. This will list all the service accounts.

--> kubectl create serviceaccount <account-name>
--> kubectl get serviceaccount

When the service account is created, it also creates a token automatically. The service account token is what must be used by the external app
while authenticating to the Kubernetes API. The token, however, is stored as a secret object. When a service account is created, it first createsthe service account object and then generates a token for the service account. It then creates a secret object and stores that token inside the 
Secret object. The Secret object is then linked to the service account. To view the token, view the Secret object by running the command "kubectldescribe secret". This token then can be used as an Authentication Bearer token while making a Rest call to the Kubernetes API. For example, 
using curl, you could provide the Bearer Token as an authorization header while making a Rest call to the Kubernetes API. 

You can create a service account, assign the right permissions using RBAC mechanism, and export your service account tokens and use it to config your third-party application to authenticate to the Kubernetes API. But what if your third-party application is hosted on the Kubernetes cluster itself? For example, we can have our custom Kubernetes dashboard application or the Prometheus application deployed on the Kubernetes cluster 
itself. In that case, this whole process of exporting the service account token and configuring the third-party application to use it, can be
made simple by automatically mounting the service token secret as a volume inside the pod hosting the third-party application. That way, the
token to access the Kubernetes API is already placed inside the pod and can be easily read by the application. You don't have to provide it
manually. For every namespace in Kubernetes, a service account named "default" is automatically created. Each namespace has its own "default"
service account. Whenever a pod is created, the default service account and its token are automatically mounted to that pod as a volume mount.
For example, we have a simple pod definition file that creates a pod using custom Kubernetes dashboard image. 

-------------------------------------------------
pod-definition.yaml				|
-------------------------------------------------
apiVersion: v1					|
kind: Pod					|
metadata:					|
  name: my-kubernetes-dashboard			|
spec:						|
  containers:					|
    - name: my-kubernetes-dashboard		|
      image: my-kubernetes-dashboard		|
-------------------------------------------------

We haven't specified any secrets or volume mounts in the definition file. However, when the pod is created, if you look at the details of the podby running the "kubectl describe pod" command, you see that a volume is automatically created from the secret named "default" token. Which is in fact the Secret containing the token for this default service account. The secret token is mounted at location /var/run/secrets/kubernetes.io/
serviceaccount inside the pod. So from inside the pod if you run the ls command to list the contents of the directory, you will see the secret 
mounted as three separate files.

--> kubectl exec -it my-kubernetes-dashboard ls /var/run/secrets/kubernetes.io/serviceaccount 
ca.crt	namespace	token

The one with the actual token is the file named "token". If you view the contents of that file, you will see the token to be used for accessing 
the Kubernetes API. The default service account is very much restricted. It only has permission to run basic Kubernetes API queries. If you'd 
like to use a different service account, modify the pod definition file to include a service account field and specify the name of the new 
service account. You cannot edit the service account of an existing pod. You must delete and recreate the pod. However, in case of deployment,
you will be able to edit the service account as any changes to the pod definition file will automatically trigger a new rollout for the 
deployment. The deployment will take care of deleting and recreating new pods with the right service account. Kubernetes automatically mounts thedefault service account if you haven't explicitly specified any. You may choose not to mount a service account automatically by setting the 
"automountServiceAccountToken" field to "false" in the pod "specs" section. 
