To generate certificates there are different tools available such as EASYRSA, OPENSSL, or CFSSL, etc or many others.
In this lecture we will use openssl tool to generate the certificates. We will start the CA certificates. First, we
create a private key using the openssl command.

--> openssl genrsa -out ca.key 2048

Then we use the "openssl request" command along with the key, which is created, to generate a certificate signing
request. The certificate signing request is like a certificate with all of your details, but with no signature.
In the certificate signing request, we specify the name of the component the certificate is for in the common name or
CN field. In this case, since we are creating a certificate for the Kubernetes CA, we name it "KUBERNETES-CA".

--> openssl req -new -key ca.key -subj "/CN=KUBERNETES-CA" -out ca.csr

Finally, we sign the certificate using the "openssl x509" command and by specifying the certificate signing request we
generated in the previous command. Since this is for the CA itself, it is self-signed by the CA using its own private 
key that it generated in the first step. Going forward for all other certificates, we will use this key, a key pair to
sign them. The CA now has its private key and root certificate file.

--> openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt

Lets now look at generating the client certificates. We start with the admin user. We follow the same process where we 
create a private key for the admin user using the openssl command. We then generate a CSR and that is where we specify 
the name of the admin user, which is kube-admin. A quick note about the name. It doesn't really have to be kube-admin.
It could be anything. But remember, this is the name that kubectl client authenticates with and when you run the kubectl
command. So, in the audit logs and elsewhere this is the name that you will see. So provide a relevant name in this field.
Finally generate a signed certificate using the "openssl x509" command. But this time you specify the CA certificate and
the CA key. You're signing your certificate with the CA key pair that makes this a valid certificate within your cluster.

--> openssl genrsa -out admin.key 2048
--> openssl req -new -key admin.key -subj "/CN=kube-admin" -out admin.csr
--> openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -out admin.crt

If you look at it, this whole process of generating a key and a certificate pair is similar to creating a user account for
a new user. The certificate is the validated user ID and the key is like the password. It's just that it's much more secure
than a simple username and password. So this is for the admin user. How do you differenciate this user from any other users?
The user account needs to be identified as an admin user and not just another basic user. You do that by adding the group
details for the user in the certificate. In this case, a group named system:masters exist on Kubernetes with administrative
privileges. It's important to note that you must mention this information in your certificate signing request. You can do
this by adding group details with the O= parameter while generating a certificate signing request.

--> openssl req -new -key admin.key -subj "/CN=kube-admin/O=system:masters" -out admin.csr

Once it's signed we now have our certificate for the admin user with admin privileges. We follow the same process to generate
client certificates for all other components that access the Kube-API server.

The Kube-Scheduler is a system component part of the Kubernetes control plane, so its name must be prefixed with the keyword
system. The same with Kube-Controller-Manager. It is again a system component, so its name must be prefixed with the keyword
system. 
And finally, kube-proxy. So far, we have created CA certificates, then all of the client certificates, including the admin
user, scheduler, controller-manager and kube-proxy. We will follow the same procedure to create the remaining three client
certificates for API servers and kubelets. When we create the server certificates for them, so we will set them aside for now.
Now, what do you do with these certificates? Take the admin certificate, for instance, to manage the cluster you can use this
certificate instead of a username and password in a RestAPI call. You make to the kube-apiserver. You specify the key, the
certificate and the CA certificate as options. That's one simple way. 

--> curl https://kube-apiserver:6443/api/v1/pods --key admin.key --cert admin.crt --cacert ca.crt

The other way is to move all of these parameters into a configuration file called kube-config.yaml. Within that, specify the 
API server endpoint details, the certificates to use, etc. That is what most of the Kubernetes clients use.

In Kubernetes for these various components to verify each other, they all need a copy of the CA root certificate. So, whenever
you configure a server or a client with certificates, you will need to specify the CA root certificate as well. Let's look at
the server side certificates now. Let's start with the ETCD server. We follow the same procedure as before to generate a 
certificate for ETCD. We will name it ETCD-SERVER. ETCD server can be deployed as a cluster across multiple servers as in a 
high availability environment. In that case, to secure communication between the different members in the cluster, we must 
generate additional peer certificates. Once the certificates are generated, specify them while starting the ETCD server. 
There are key and cert file options where you specify the ETCD server keys. There are other options available for specifying
the peer certificates. And finally, it requires the CA root certificate to verify that the clients connecting to the ETCD 
server are valid.

Let's talk about the kube-apiserver now. We generate a certificate for the API server like before. But the API server is the
most popular of all components within the cluster. Everyone talks to the kube-apiserver, every operation goes through the
kube-apiserver. Anything moves within the cluster, the API server knows about it. You need information, you talk to the API
server and so it goes by many names and aliases within the cluster. Its real name is kube-apiserver, but some call it Kubernetes.
Because for a lot of people who don't really know what goes under hood of Kubernetes, the kube-apiserver is Kubernetes. Only
then those referring to the kube-apiserver by these names will be able to establish a valid connection. So, we used the same set
of commands as earlier to generate a key, in the certificate signing request you specify the name kube-apiserver. 

--> openssl genrsa -out apiserver.key 2048
--> openssl req -new -key apiserver.key -subj "/CN=kube-apiserver" -out apiserver.csr

But how do you specify all the alternate names? For that, you must create an openssl config file. Create an "openssl.cnf" file
and specify the alternate names in the alt_names section of the file. Include all the DNS names the API server goes by. As well
as the IP address pass this config file as an option while generating the certificate signing request.

-------------------------------------------------
openssl.cnf                                     |
-------------------------------------------------
[req]                                           |
req_extensions = v3_req				|
distinguished_name = req_distinguished_name	|
[ v3_req ]					|
basicConstraints = CA:FALSE			|
keyUsage = nonRepudiation,			|
subjectAltName = @alt_names			|
[alt_names]					|
DNS.1 = kubernetes				|
DNS.2 = kubernetes.default			|
DNS.3 = kubernetes.default.svc			|
DNS.4 = kubernetes.default.svc.cluster.local	|
IP.1 = xx.xx.xx.xx				|
IP.2 = xx.xx.xx.xx				|
-------------------------------------------------

--> openssl req -new -key apiserver.key -subj "/CN=kube-apiserver" -out apiserver.csr -config openssl.cnf

Finally, sign the certificate using the certificate and key. You then have the kube-apiserver certificate.

--> openssl x509 -req -in apiserver.csr -CA ca.crt -CAkey ca.key -out apiserver.crt

Remember to consider the API client certificates that are used by the API server while communicating as a client to the ETCD and
kubelet servers. The location of these certificates are passed in to the kube-apiserver's executable or service configuration file.

Next comes the kubelet server. The kubelet server is an HTTPS API server that runs on each node responsible for managing the node. 
That's who the API server talks to, to monitor the node, as well as send information regarding what pods to schedule on this node.
As such, you need a key-certificate pair for each node in the cluster. Now what do you name these certificates? Are they all going
to be named kubelets? No, they will be named after their nodes (node01, node02, ...). Once the certificates are created, use them
the kubelet-config.yaml file. We also talked about a set of client certificates that will be used by the kubelet to communicate 
with the kube-apiserver. These are used by the kubelet to authenticate into the kube-apiserver. They need to be generated as well.
What do you name these certificates? The API server needs to know which node is authenticated and give it the right set of permissions.
So it requires the nodes to have the right names in the right formats. Since the nodes are system components like kube-scheduler and
the controller-manager, the format starts with the "system" keyword followed by node and the node name (system:node:nodename). And
how would the API server give it the right set of permissions? We specified a group name for the admin user, so the admin user gets
administrative privileges. Similarly, the nodes must be added to a group named "system nodes". Once the certificates are generated,
they go into the kube-config files. 
