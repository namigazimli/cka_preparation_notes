Here we have python application that connects to mysql database:

-----------------------------------------------------------------
app.py                                                          |
-----------------------------------------------------------------
import os                                                       |
from flask import Flask                                         |
                                                                |
app = Flask(__name__)                                           |
                                                                |
@app.route("/")                                                 |
def main():                                                     |
                                                                |
    mysql.connector.connect(host='mysql', database='mysql',     |
                            user='root', password='paswrd')     |
								|
    return render_template('hello.html', color=fetchcolor())	|
								|
								|
if __name__="__main__":						|
     app.run(host="0.0.0.0", port="8080")			|
-----------------------------------------------------------------

In this code you can see the hostname, username and password hardcoded. This is not good idea.
One option would be to move these values into a ConfigMap. The ConfigMap stores configuration
data in plain text format. So, while it would be okay to move the hostname and username into a
ConfigMap. It is definitely not the right place to store a password. This is where Secrets 
coming. Secrets are used to store sensitive information like passwords or keys. They're similar
to ConfigMaps, except that they're stored in an encoded or hashed format. As with ConfigMaps,
there are two steps involved in working with Secrets. First, create the Secret and second is 
injected into Pod. There are two ways of creating a Secret. The imperative way - without using
a Secret definition file and the declarative way by using a Secret definition file. With an
imperative method you can directly specify the key-value pairs in the command line itself. To 
create a Secret of the given values, run the "kubectl create secret generic" command.

--> kubectl create secret generic <secret-name> --from-literal=<key>=<value>

For example,
--> kubectl create secret generic app-secret --from-literal=DB_Host=mysql

The command is followed by the secret name and the option --from-literal. The --from-literal 
option is used to specify the key-value pairs in the command itself. In this example, we are
creating a secret by the name "app-secret", with a key-value pair DB_Host=mysql. If you wish
to add additional key-value pairs, simply specify the --from-literal options multiple times,
however, this could get complicated when you have too many secrets to pass in.

--> kubectl create secret generic app-secret --from-literal=DB_Host=mysql \
>   --from-literal=DB_User=root --from-literal=DB_Password=paswrd

Another way to input the secret data is through a file. Use the --from-file option to specify
a path to the file that contains the required data.

--> kubectl create secret generic <secret-name> --from-file=<path-to-file>
--> kubectl create secret generic app-secret --from-file=app_secret.properties

The data from this file is read and stored under the name of the file.

For declarative approach, we create a definition file, just like how we did for the ConfigMap.

-----------------------------
secret-data.yml             |
-----------------------------
apiVersion: v1              |
kind: Secret                |
metadata:                   |
  name: app-secret          |
data:                       |
  DB_Host: mysql            |
  DB_User: root             |
  DB_Password: paswrd       |
-----------------------------

--> kubectl create -f secret-data.yml

However, one thing we discussed about secrets was that there used to store sensitive data and are
in an encoded format. Here we have specified the data in plain text which is not very safe. So,
while creating a Secret with a declarative approach, you must specify the secret values in a
hashed format. But how do you convert the data from the plain text to an encoded format? On a 
Linux host from the command "echo -n" followed by the text you are trying to convert, and pipe 
that to the base64 utility.

--> echo -n 'mysql' | base64 ===> output: bXlzcWw=
--> echo -n 'root' | base64 ===> output: cm9vdA==
--> echo -n 'paswrd' | base64 ===> output: cGFzd3Jk

-----------------------------
secret-data-v2.yml          |
-----------------------------
apiVersion: v1              |
kind: Secret                |
metadata:                   |
  name: app-secret          |
data:                       |
  DB_Host: bXlzcWw=         |
  DB_User: cm9vdA==         |
  DB_Password: cGFzd3Jk     |
-----------------------------

To view secrets run the "kubectl get secrets" command. This lists the newly created secret along with
another secret previously created by Kubernetes.

--> kubectl get secret app-secret -o yaml

Now how do you decode these hashed values? Use the same "base64" command used earlier to encode it. 
But this time add a --decode option to it.

--> echo -n 'bXlzcWw=' | base64 --decode
--> echo -n 'cm9vdA==' | base64 --decode
--> echo -n 'cGFzd3Jk' | base64 --decode

Here I have a simple pod definition file that runs my application.

--------------------------------------
pod-definition.yml                   |
--------------------------------------
apiVersion: v1                       |
kind: Pod                            |
metadata:                            |
  name: simple-webapp-color          |
spec:                                |
  containers:                        |
    - name: simple-webapp-color      |
      image: simple-webapp-color     |
      ports:                         |
        - containerPort: 8080        |
      envFrom:                       |
        - secretRef:                 |
            name: app-secret         |
--------------------------------------

To inject an environment variable, add a new property to the container called "envFrom". The "envFrom"
property is a list. So, we can pass as many environment variables as required each item. 

--> kubectl create -f pod-definition.yml

There are other ways to inject secret into Pods. You can inject as single environment variables or inject
the whole secret as files in a volume. If you were to mount the secret as a volume in the pod, each
attribute in the secret as a file with the value of the secret as its content.

----------------------------
env:                       |
  - name: DB_Password      |
    valueFrom:             |-----> passing single env variable
      secretKeyRef:        |
        name: app-secret   |
        key: DB_Password   |
----------------------------

------------------------------
volumes:                     |
  - name: app-secret-volume  |
    secret:                  |---> passing env variables as volume
      name: app-secret       |
------------------------------
