By default, the kubectl tool looks for a file named "config" under a directory ".kube" under the user's home directory. So if you create the 
kubeconfig file there, you don't have to specify the path to the file explicitly in the kubectl command. That's reason you haven't been specifyinany options for your kubectl commands so far. The kubeconfig file is in a specific format. Let's take a look at that. The config file has three
sections: clusters, users and contexts. Clusters are the various Kubernetes clusters that you need access to. So you have multiple clusters for
development environment, or testing environment or prod, or for different organizations or on different cloud providers, etc. All those go there.Their users are the user accounts with which you have access to these clusters. For example, the admin user, a dev user, a prod user, etc. These users may have different privileges on different clusters. Finally, contexts marry these together. Contexts define which user account will be
used to access which cluster. For example, you could create a context named "admin@production" that will use the admin account to access a prod
cluster. Or I may want to access the cluster I have set up on Google with the dev users credentials to test deploying the application I built.   Remember, you are not creating any new users or configuring any kind of user access or authorization in the cluster with this process. You're    using existing users with their existing privileges and defining what user you're going to use to access what cluster. That way you don't have tospecify the user certificates and server address in each and every kubectl command you run. So how does it fit into our example?
The service specification in our command goes into the cluster section. The admin user's key and certificates goes into the user section. You 
then create a context that specifies to use the mykubeadmin user to access the mykubeplayground cluster. Let's look at the real kubeconfig file.
The kubeconfig file is in a YAML format. 

---------------------------------------------------------
kubeconfig.yaml						|
---------------------------------------------------------
apiVersion: v1						|
kind: Config						|
current-context: dev-user@google			|
clusters:						|
- name: my-kube-playground				|
  cluster:						|
    certificate-authority: ca.crt			|
    server: https://my-kube-playground:6443		|
							|
contexts:						|
- name: my-kube-admin@my-kube-playground		|
  context: 						|
    cluster: my-kube-playground				|
    user: my-kube-admin					|
							|
users:							|
- name: my-kube-admin					|
  user:							|
    client-certificate: admin.crt			|
    client-key: admin.key				|
---------------------------------------------------------

Once the file is ready, remember that, you don't have to create any object like you usually do for other Kubernetes objects. The file is left as is and is read by the kubectl command, and the required values are used. How does kubectl know which context to choose from? We have defined 3 
contexts here. Which one should it start with? You can specify the default context to use by adding a field "current-context" to the kubeconfig 
file. Specify the name of the context to use. In this case kubectl will always use the context "dev-user@google" to access the Google clusters 
using the dev-user's credentials. There are command line options available within the kubectl to view and modify the kubeconfig files. To view 
the current file being used, run the "kubectl config view" command. It lists the clusters, contexts and users as well as the current context thatis set. If you don't specify which kubeconfig file to use, it ends up using the default file located in the folder ".kube" in the user's home 
directory. Alternatively, you can specify a kubeconfig file by passing the --kubeconfig option in the command line.

--> kubectl config view --kubeconfig=my-custom-config

How do you update your current context? So you've been using my-kube-admin user to access my-kube-playground. How do you change the context to 
use prod user to access the production cluster? Run the "kubectl config use-context" command to change the current context to the prod-user@prod context.

--> kubectl config use-context prod-user@prod

You can make other changes in the file, update or delete items in it using other variations of "kubectl config" command.
Each cluster may be configured with multiple namespaces within it. Can you configure a context to switch to a particular namespace? Yes. The 
context section in the kubeconfig file can take additional field called "namespace" where you can specify a particular namespace. This way, when you switch to that context, you will automatically be in a specific namespace. 

You have seen part to certificate files mentioned in kubeconfig. It's better to use the full path. 
